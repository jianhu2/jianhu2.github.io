<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 深海映星辰</title>
    <link>https://blog.hujian.xyz/posts/</link>
    <description>Recent content in Posts on 深海映星辰</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Mar 2025 20:19:04 +0800</lastBuildDate><atom:link href="https://blog.hujian.xyz/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>实用软件插件分享</title>
      <link>https://blog.hujian.xyz/posts/%E5%B7%A5%E5%85%B7%E5%88%86%E4%BA%AB/</link>
      <pubDate>Mon, 24 Mar 2025 20:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/%E5%B7%A5%E5%85%B7%E5%88%86%E4%BA%AB/</guid>
      <description>实用软件/插件分享 软件类： uTools：一个极简、插件化的现代桌面软件 本地搜索：基于everything的文件搜索及预览 聚合翻译：聚合了多种在线翻译 小工具：json文件序列化，C++函数速查，文本代码比较等等。 编码小助手：时间戳，base64编码解码，哈希加密，进制转换等等。 颜色助手：提取颜色 chrome小助手：chrome书签搜索 官网地址 https://www.u-tools.cn/ ApowerREC（破解版）：录屏软件 下载地址 https://github.com/cappuccino5/share-tools 官网地址 https://www.apowersoft.cn/record-all-screen 效果示例
chrome插件类： git master：为github、gitlab、gitee网站提供树形展示。 SmartProxy/SwitchyOmega google游览器选择性的代理流量。 Chrome 插件安装链接 订阅规则列表，配置白名单。 导入规则，复制规则连接地址的内容。 https://raw.githubusercontent.com/boy86001/SmartProxy-Tools/main/gfwlist.txt 导入beta 3. 参考连接。 1. https://github.com/boy86001/SmartProxy-Tools/blob/main/README-cn.md </description>
    </item>
    
    <item>
      <title>ansible自动化安装docker</title>
      <link>https://blog.hujian.xyz/posts/ansible%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%89%E8%A3%85docker/</link>
      <pubDate>Tue, 18 Mar 2025 15:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/ansible%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%89%E8%A3%85docker/</guid>
      <description>ansible自动化安装docker.md 本地软件准备 支持linux/macOS上运行。
1. 环境依赖： 依赖 python3-pip，
安装ansible ，以ubuntu2204为例 sudo apt update# 更新python版本sudo apt install python3-pip -y# 安装ansiblesudo apt install ansible# 验证 pip 是否安装成功：python3 -m pip --versionpip 22.0.2 from /usr/lib/python3/dist-packages/pip (python 3.10) 2. 脚本下载 ansible-install-docker 快速安装docker 1.在hosts.yml中添加要部署的ssh登录信息/服务器内外网IP地址，比如:
1 2 3 4 5 6 7 8 9 dev: #这个命名在1中被引用 hosts: 192.</description>
    </item>
    
    <item>
      <title>ubuntu2404手动安装docker</title>
      <link>https://blog.hujian.xyz/posts/ubuntu%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85docker/</link>
      <pubDate>Tue, 18 Mar 2025 11:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/ubuntu%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85docker/</guid>
      <description>ubuntu手动安装docker.md Ubuntu 24.04.1 LTS 安装docekr-compose docker; 非snap 安装.
查看系统版本： # lsb_release -aNo LSB modules are available.Distributor ID: UbuntuDescription: Ubuntu 24.04.1 LTSRelease: 24.04Codename: noble 一 安装前准备 强制删除snap安装的docekr，如果没有使用snap安装过docker请跳过。
sudo snap remove &amp;ndash;purge docker 二 安装步骤： sudo apt-get update
sudo apt-get install \apt-transport-https \ca-certificates \curl \gnupg-agent \software-properties-common curl -fsSL https://download.</description>
    </item>
    
    <item>
      <title>小米路由器开发板</title>
      <link>https://blog.hujian.xyz/posts/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8%E5%BC%80%E5%8F%91%E6%9D%BF/</link>
      <pubDate>Wed, 21 Aug 2024 16:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8%E5%BC%80%E5%8F%91%E6%9D%BF/</guid>
      <description>小米路由器开发板环境制作 准备条件 a.小米路由器型号要符合支持开发板，参考下图； b.下载开发板固件（与路由器型号匹配）：选择下载&amp;gt;ROM&amp;gt;小米路由器3 下载小米路由器3 开发版（miwifi_r3_firmware_e9f31_2.27.120.bin）
http://miwifi.com/miwifi_download.html 升级固件 步骤一 路由器初始管理平台地址：http://192.168.31.1。登陆小米路由器的web界面，进入后台。选择手动升级，上传开发版固件（miwifi_r3_firmware_e9f31_2.27.120.bin）点击升级，等待5分钟左右就会自动升级完成。wifi的ssid和密码仍然保持不变。
步骤二 a.绑定路由器到自己的小米账号
打开小米路由器的web界面，使用微信扫描登录页面的二维码安装miwifi 登录后页面提示小米路由器3(R3) MiWiFi 开发版 2.27.120，表示安装成功。 安装ssh并登录到终端 必须升级固件后才开始操作安装SSH，满足条件：安装固件：1. 开发版 2.27.120；2. 用户已经绑定路由器到自己的小米账号
获取ssh密码 访问：https://d.miwifi.com/rom/ssh 并登录以上的网页。网页上展示了root的密码和开启SSH的工具包，下载工具包，将下载好的文件移植到U盘，保证U盘里面的文件名为miwifi_ssh.bin。 注意事项： 使用chrome下载工具包可能会被拦截，请使用其他浏览器下载。 安装步骤：
1. 请将下载的工具包bin文件复制到U盘（FAT/FAT32格式）的根目录下，保证文件名为miwifi_ssh.bin；2. 断开小米路由器的电源，将U盘插入USB接口；3. 按住reset按钮之后重新接入电源，指示灯变为黄色闪烁状态即可松开reset键；4. 等待3-5秒后安装完成之后，小米路由器会自动重启，之后您就可以尽情折腾啦 ：）使用SSH进入终端 连接小米路由器WIFI ，在终端输入：ssh root@192.168.31.1；SSH密码在页面查看（https://d.miwifi.com/） 下载潘多拉固件 访问：https://opt.cn2qq.com/padavan/ 搜索 MI 打开小米路由器3的固件并下载。 将下载的MI-3_3.4.3.9-099.trx 放入U盘根目录，名字不要随意更改，保证为：MI-3_3.4.3.9-099.trx；插入U盘到路由器，然后重启；
刷入潘多拉固件 上传下载的固件到路由器的/tmp目录下：</description>
    </item>
    
    <item>
      <title>Centos7.x配置Go开发环境</title>
      <link>https://blog.hujian.xyz/posts/centos-7-go%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sun, 21 Apr 2024 16:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/centos-7-go%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>Centos7.x配置Go开发环境 安装golang 准备环境
$ sudo yum update$ sudo yum install wget vim -y 源码包编译安装（可下最新版本）：
$ wget https://go.dev/dl/go1.22.2.linux-amd64.tar.gz$ sudo tar -C /usr/local -xzf go1.22.2.linux-amd64.tar.gz https://studygolang.com/dl下载最新的源码包编译
设置环境变量 Go代码必须放在工作空间中，实际上就是一个目录，且必须包含src、pkg、bin三个子目录。它们的用途如下：
bin：包含编译后的可执行命令 pkg：包含包对象 src：包含Go的源文件，它们被组织成包 因此首先创建go语言的工作空间：
$ mkdir $HOME/gowork 然后在配置文件中添加环境变量
$ vim /etc/profile 加入以下内容：
# Golangexport GO111MODULE=onexport GOROOT=/usr/local/goexport GOPATH=$HOME/goworkexport GOCACHE=/tmp/gocacheexport GONOSUMDB=&amp;#34;github.</description>
    </item>
    
    <item>
      <title>ubuntu 22.04 安装go</title>
      <link>https://blog.hujian.xyz/posts/ubuntu22.04-go%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sun, 21 Apr 2024 16:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/ubuntu22.04-go%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>ubuntu 22.04 安装go(适用ubuntu20以上版本) 环境准备 apt update &amp;amp;&amp;amp; apt-get upgrade -y 环境安装 mkdir ~/go
cd ~/go
wget https://go.dev/dl/go1.22.2.linux-amd64.tar.gz
tar -C /usr/local go1.22.2.linux-amd64.tar.gz
设置环境变量 Go代码必须放在工作空间中，实际上就是一个目录，且必须包含src、pkg、bin三个子目录。它们的用途如下：
bin：包含编译后的可执行命令 pkg：包含包对象 src：包含Go的源文件，它们被组织成包 因此首先创建go语言的工作空间：
$ mkdir $HOME/gowork 在配置文件中添加环境变量
$ vim /etc/profile 加入以下内容：
export GOROOT=/usr/local/goexport GOPATH=$HOME/goworkexport GOBIN=$GOPATH/binexport PATH=$GOPATH:$GOBIN:$GOROOT/bin:$PATHexport GONOSUMDB=&amp;#34;github.com&amp;#34;export GONOPROXY=&amp;#34;github.com&amp;#34;export GOPROXY=https://goproxy.cn,directexport GOPRIVATE=&amp;#34;github.</description>
    </item>
    
    <item>
      <title>gcc windows环境安装(目前13.2版本)</title>
      <link>https://blog.hujian.xyz/posts/gcc13.2%E7%89%88%E6%9C%ACwindwos%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</link>
      <pubDate>Thu, 02 Nov 2023 10:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/gcc13.2%E7%89%88%E6%9C%ACwindwos%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</guid>
      <description>文章目录 1 2 3 4 5 6 7 8 9 10 11 一、简介 1. MinGW 和 MinGW-W64 区别和联系 二、下载 1. 从 sourceforge.net 下载 2. 从 github 下载 3. 从 镜像站点 下载 三、安装与配置 1. 在线安装 2. 离线安装 3. 环境配置 四、总结 一、简介 MinGW 和 MinGW-W64 区别和联系 MinGW和MinGW-W64都是用于Windows平台的轻量级GNU工具链，用于开发和编译C和C++程序。 MinGW（Minimalist GNU for Windows）是一个32位的GNU工具链，它提供了一套基于GNU的开发环境，包括GCC编译器和一些GNU库，可以用来编译Windows下的C和C++程序。但MinGW只支持32位程序的编译。
MinGW-W64是一个64位的GNU工具链，是MinGW的升级版，原本它是MinGW的分支，后来成为独立发展的项目，它支持同时编译32位和64位程序。它包括了一系列的GNU库和工具，例如GCC、Binutils、GDB等，还支持一些实用工具和库，如OpenMP、MPI等。</description>
    </item>
    
    <item>
      <title>nginx 301跳转问题总结</title>
      <link>https://blog.hujian.xyz/posts/nginx-301%E8%B7%B3%E8%BD%AC%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 25 Jul 2023 10:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/nginx-301%E8%B7%B3%E8%BD%AC%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</guid>
      <description>1.nginx 301跳转问题背景 在使用hugo部署博客，部署方案nginx+docker,在浏览器地址使用url访问静态资源目录时，发现默认跳转到了http协议的地址。 调出浏览器发现客户端发送的http请求收到了一个301状态码的响应，并且响应头中的Location字段便是跳转到的http协议的地址。 2.原因分析 为啥服务端会返回301呢？首先需要弄清楚状态码的含义。HTTP协议中3xx开头的状态响应码都是表示重定向的响应。根据RFC的定义：
301 Moved Permanently
302 Found
303 See Other
307 Temporary Redirect
301是永久重定向。如果使用Nginx作为HTTP服务器，那么当用户输入一个不存在的地址之后，基本上会有两种情况：1.返回404状态码，2.返回301状态码和重定向地址。404 Not Found不做讨论，只说下301 Moved Permanently的处理过程。 首先需要明确的问题是，301重定向在什么情况下会被触发呢？
答案是：Nginx负责设置301 Moved Permanently状态码。但nginx.conf控制Nginx如何处理301 Moved Permanently状态码！ 换句话说，要不要进行页面重定向，和怎么重定向，完全是用户配置的结果！ Nginx主动设置301 Moved Permanently状态码只有一种情况，当用户在浏览器输入了一个url地址，末尾部分是一个文件目录且不以斜杠”/“结尾，比如 “www.test.com/index” 。 Nginx没有找到index这个文件，但发现了index是个目录。于是本次访问的返回状态码就会被设置成301 Moved Permanently。 浏览器与Nginx的通信过程如下所示：
一般情况下，我们会在nginx.conf中配置absolute_redirect ，server_name_in_redirect和port_in_redirect，以便到达个性化的重定向功能。其中absolute_redirect控制Location url的生成方式。
absolute_redirect设置成on，则生成绝对路径作为Location url。 absolute_redirect设置成off，则生成相对路径作为Location url。 只有absolute_redirect设置为on时，另外两个配置才会生效。
3. 解决方法 设置absolute_redirect为off，构造相对路径作为Location url，示例如下：</description>
    </item>
    
    <item>
      <title>goland IDE追新</title>
      <link>https://blog.hujian.xyz/posts/goland-ide%E8%BF%BD%E6%96%B0/</link>
      <pubDate>Fri, 21 Jul 2023 16:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/goland-ide%E8%BF%BD%E6%96%B0/</guid>
      <description>追新2023，goland激活码快速激活至2099年！ 当前教程支持的版本：2020.2 ~ GoLand 2023.2 232.8453.111
前言：
goland 软件开发公司 jetbrains 在 2022 年 4 月发布了 goland 2022年第一个大版本2022.1，同时也带来了最严厉的反破解机制，之前所有的破解方案全部失效！在这样的背景下，在奋战了几周左右之后还是成功破解了最新版本2022.1.2！之前的教程中，在破解过程中需要各位码友们自己去操作一些东西，改一下配置，造成了部分不仔细的码友 goland 重启后打不开（虽然后续联系到我修复并激活成功，但是这样确实浪费时间和精力）。同时由于各个版本的配置稍微有些变化，所以本次教程更新给大家带来真正硬核的破解方式：一键脚本激活！！！不需要各位码友有任何多余的操作，只需要双击 vbs 脚本执行，然后重启 goland 就可以完成激活！
注意：本脚本做了向下兼容到2020.1，如果您不想升级，直接执行脚本后重启软件就可以完成激活！
破解过程详解：
1、软件准备 （1）goland 软件安装包（官网下载安全又快速）：https://www.jetbrains.com/goland/download/#section=windows
（2）获取激活码，激活包下载。各位码友们只管关心下图中 golandActive.vbs 脚本文件即可！
网盘地址(2023/07/23更新)：https://pan.baidu.com/s/1hVWbs9z-Deu5RmQ0PO0hTQ?pwd=3fo7
提取码：3fo7
网盘下载后文件zip解压密码：abc1
2、破解过程 2.1软件安装 在官网下载软件后一直点击 Next 即可（已经安装的码友们不用理会），然后打开 goland，发现需要注册！这里我们先不管，先点击 Exit 退出，准备开始运行激活脚本。 2.2 获取激活码 请确保 goland 软件处于关闭状态！ 鼠标双击网盘下载的破解包里面的 golandActive.vbs 得到如下界面，点击确定按钮即可！</description>
    </item>
    
    <item>
      <title>kubernetes常用命令</title>
      <link>https://blog.hujian.xyz/posts/kubernetes%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 10 May 2023 16:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/kubernetes%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>1. 将service端口暴露到本地 比如将生产环境的redis暴露到本地6379端口
1 kubectl port-forward service/redis -n [namesplace] 6379:6379 2. 进入容器中 kubectl exec -it [pod] -n [namesplace] -- bash 3. 查看日志 查看最后1行的日志
kubectl logs -f --tail 1 [pod] -n [namesplace] 查看最后一分钟的所有日志
kubectl -n [namesplace] logs [pod] --since=1m 查看指定时间
kubectl -n -n [namesplace] logs -f [pod] --since-time=&amp;#34;2022-10-24T02:54:03.467+01:00&amp;#34; 4. 查看配置： kubectl get pod product-6b5c98478b-rpgr6 --namespace=product-prod -o yamlkubectl describe pods product-6b5c98478b-rpgr6 --namespace=product-prod 5.</description>
    </item>
    
    <item>
      <title>ubuntu22.04安装gitlab</title>
      <link>https://blog.hujian.xyz/posts/ubuntu22.04%E5%AE%89%E8%A3%85gitlab/</link>
      <pubDate>Fri, 28 Apr 2023 16:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/ubuntu22.04%E5%AE%89%E8%A3%85gitlab/</guid>
      <description>1. gitlab安装前准备 系统版本：Ubuntu 22.04.1 LTS 1.1 更新系统环境 sudo apt updatesudo apt upgrade 1.2 安装和配置必须的依赖项 1 2 sudo apt-get install -y curl openssh-server ca-certificates tzdata perl sudo apt-get install curl 2.下载和安装gitlab 2.1 下载指定的版本 1 curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash 2.2 开始安装 注意：localhost为访问gitlab的地址，85为访问gitlab的端口号
1 sudo EXTERNAL_URL=&amp;#34;http://localhost:85&amp;#34; apt-get install gitlab-ce=15.9.3-ce.0 除非您在安装过程中指定了自定义密码，否则将随机生成一个密码并存储在 /etc/gitlab/initial_root_password文件中(出于安全原因，24 小时后，此文件会被第一次 gitlab-ctl reconfigure 自动删除， 因此若使用随机密码登录，建议安装成功初始登录成功之后，立即修改初始密码）。使用此密码和用户名 root 登录。</description>
    </item>
    
    <item>
      <title>使用aws-cloudfront做CDN转发</title>
      <link>https://blog.hujian.xyz/posts/%E4%BD%BF%E7%94%A8aws-cloudfront%E5%81%9Acdn%E8%BD%AC%E5%8F%91/</link>
      <pubDate>Mon, 20 Mar 2023 16:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/%E4%BD%BF%E7%94%A8aws-cloudfront%E5%81%9Acdn%E8%BD%AC%E5%8F%91/</guid>
      <description>CND转发到v2ray服务 环境:
域名一个 aws cloudfront服务 数据转发流程 A.example.com-&amp;gt;cloudfront-&amp;gt;B.example.com-&amp;gt;ip.ec2.port 注意事项 踩过的坑： v2ray-plugin报错 http: TLS handshake error from 64.252.173.97:23912: read tcp 172.21.0.3:443-&amp;gt;64.252.173.97:23912: read: connection reset by peer 原因为2层(EC2,cloudfront)TLS证书不一致; 第一个想法就是将两个证书整成一致，然后cloudfront就上传&amp;quot;Let&amp;rsquo;s Encrypt自签的证书，发现使用自上传的证书cloudfront根本不转发数据了;得出一个结论:cloudfront必须使用它请求生成的tls证书； 解决方案：A.example.com-&amp;gt;cloudfront-&amp;gt;ip.ec2.port转发流程修改为A.example.com-&amp;gt;cloudfront-&amp;gt;B.example.com-&amp;gt;ip.ec2.port v2ray-plugin报错not found in &#39;Sec-Websocket-Version&#39; header 1 cloudfront ws一直是v2ray.com/core/transport/internet/websocket: failed to convert to WebSocket connection &amp;gt; websocket: unsupported version: 13 not found in &amp;#39;Sec-Websocket-Version&amp;#39; header 原因是cloudfront没有配置转发HTTP请求头,CloudFront 预设并不会转发所有的 HTTP request headers， 有些 request headers 在经过 CloudFront 之后就被丟掉了导致 v2ray 无法识别到必要的数据。 需要更改 origin request policies 為 Managed-AllViewer，這樣它才會轉發所有的 headers。 - 解决方案：cloudfront设置源请求策略为```Managed-AllViewer```cloudfront转发数据到源失败，解决方法是需要更改行为策略-&amp;gt;缓存策略名称(Managed-CachingDisabled)-&amp;gt;源请求策略名称(Managed-AllViewerExceptHostHeader) 源服务器没有接收到数据,错误的提示： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 root@localhost ~ # curl -v https://proxy.</description>
    </item>
    
    <item>
      <title>centos 7.9离线安装docker</title>
      <link>https://blog.hujian.xyz/posts/centos%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85docker/</link>
      <pubDate>Thu, 02 Mar 2023 16:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/centos%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85docker/</guid>
      <description>centos 7.9安装docker 1.离线下载docker https://download.docker.com/linux/static/stable/x86_64/docker-20.10.9.tgz 2.离线安装docker 准备前：
2.0.1 关闭Selinux 首先, 执行getenforce或sestatus, 查询selinux状态, CentOS系统安装后默认为enforcing.
getenforce或sestatus 2.0.2 修改selinux配置 1 2 3 4 5 vim /etc/selinux/config 修改selinux配置文件 SELINUX=enforcing 修改为 SELINUX=disabled 2.0.3 重复服务器以上修改生效 1 reboot 2.1 移动文件到目标服务器并执行tar命令解压，如： tar -zxvf docker-20.10.9.tgz 2.2 将/home/docker目录下解压出来的所有docker文件复制到 /usr/bin/ 目录下 cp docker/* /usr/bin/ 2.3 将docker注册为service，进入/etc/systemd/system/目录,并创建docker.service文件 1 2 cd /etc/systemd/system/ touch docker.</description>
    </item>
    
    <item>
      <title>centos7.7手动挂载磁盘分区</title>
      <link>https://blog.hujian.xyz/posts/centos7.7%E6%89%8B%E5%8A%A8%E6%8C%82%E8%BD%BD%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA/</link>
      <pubDate>Mon, 27 Feb 2023 16:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/centos7.7%E6%89%8B%E5%8A%A8%E6%8C%82%E8%BD%BD%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA/</guid>
      <description>1. centos挂载磁盘分区 1.1 系统环境 aliyun CentOS Linux release 7.7.1908 (Core) 1.2 目的： 磁盘扩容到256G，主分区(/dev/vda1)使用100G; 剩156G可扩容 1.3 限制条件： 主分区(/dev/vda1)系统盘使用的是ID 83数据卷分区，主分区(/dev/vda1)默认不是lvm，不能实现无缝扩容， 考虑到生产商用环境数据量大，操作风险大，这里用可分配的156G新建分区挂载到系统磁盘/data目录,而不是在主分区上直接扩容 2. 磁盘分区 2.1 查询磁盘大小 1 2 3 4 5 # lsblk -l NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT vda 253:0 0 256G 0 disk vda1 253:1 0 100G 0 part / vda2 253:2 0 156G 0 part 2.</description>
    </item>
    
    <item>
      <title>windows安装ubuntu22.04</title>
      <link>https://blog.hujian.xyz/posts/windows%E5%AE%89%E8%A3%85ubuntu22.04/</link>
      <pubDate>Fri, 10 Feb 2023 16:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/windows%E5%AE%89%E8%A3%85ubuntu22.04/</guid>
      <description>1.安装前准备 U盘&amp;gt;=8G，干净的U盘，因为在安装过程中会清除U盘数据; Windows 7 或更高版本 (32/64 位均可)。 U盘安装引导依赖2选1,建议选Rufus： U盘引导安装依赖uboot - https://github.com/balena-io/etcher/releases/download/v1.18.4/balenaEtcher-Setup-1.18.4.exe U盘引导依赖-Rufus 下载ubuntu镜像选择对应的系统架构版本，建议选择官方，如果下载速度慢则选择aliyun：
官方下载ubuntu22.04桌面版本 阿里云镜像源ubuntu22.04桌面版本 ubuntu-arm架构镜像源 2.U盘制作安装引导 将下载好的rufus和ubuntu22.04镜像放到U盘中 执行rufus二进制文件，按步骤执行： 选择对应的U盘位置 选择ubuntu镜像文件并选择打开 选择START执行写入U盘，可能需要额外的资源来写入ISO，弹窗选择yes；在执行中可能遇到一些警告说会清空U盘，选择OK; 安装引导过程总共需要约10分钟,安装完成后状态栏为READY，此时选择CLOSE,安装完成; 3. 安装ubuntu U盘制作好安装引导后在目标机器上执行：
重启电脑，在启动过程中按F12或者F10或者F2(根据电脑品牌选择不同)进入boot菜单，在菜单中选择USB boot菜单中选择语言，continue进入下一步 安装ubuntu步骤：选择normal installation；如果电脑给的配置很低，就选择minimal installation； 配置安装：install type配置来选择是否将ubuntu作为您唯一的操作系统(此选择会删除windows系统并清除磁盘);如果当前有windows系统则可以选择双系统共同安装; 存储卷LVM选择安全加密，并设置密码 用于恢复数据;密码记录下来保存在其它地方; 创建你的登录账号密码和计算机名字，continue继续 等待进度条，100%完成安装，并选择重启 参考链接 Install Ubuntu desktop bootable引导 </description>
    </item>
    
    <item>
      <title>centos7.9扩展磁盘</title>
      <link>https://blog.hujian.xyz/posts/centos7.9%E6%89%A9%E5%B1%95%E7%A3%81%E7%9B%98/</link>
      <pubDate>Mon, 02 Jan 2023 16:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/centos7.9%E6%89%A9%E5%B1%95%E7%A3%81%E7%9B%98/</guid>
      <description>1. centos 扩展磁盘分区 1.1 系统环境1 vmware centos 7.9 2.扩展步骤 2.1 步骤一 关机状态下在设置-&amp;gt;硬盘-&amp;gt;扩展-&amp;gt;选择硬盘大小; 我这里选择扩展到50G
2.2 步骤二 进入系统内部执行命令扩展磁盘大小，主要是创建逻辑卷(PVC)/物理卷(PV),从逻辑卷(LV)映射到物理卷(PV): 1 2 3 4 5 6 7 8 9 10 11 12 13 df -mh lsblk -l // 查询系统磁盘挂载目录 fdisk -l pvcreate /dev/sda3 vgextend centos /dev/sda3 vgs // 返回卷组的属性 pvdisplay // 查看物理卷 vgdisplay // 查看逻辑卷 lvdisplay // 查看逻辑卷状态 lvextend -L +50G /dev/test_vg/test_lv // 分配指定大小 lvextend -l +100%FREE /dev/centos/root // 分配100的剩余空间 xfs_growfs /dev/mapper/centos-root // 刷新根分区生效 df -mh // 查询磁盘 系统重启更新重新挂载磁盘卷 1 2 3 lvdisplay // 查看逻辑卷状态 vgchange -a y test_vg // 重新激活逻辑卷组 mount /dev/test_vg/test_lv /data // 重新挂载逻辑卷到指定目录 2.</description>
    </item>
    
    <item>
      <title>ubuntu宿主机部署ss-local客户端</title>
      <link>https://blog.hujian.xyz/posts/ubuntu%E5%AE%BF%E4%B8%BB%E6%9C%BA%E9%83%A8%E7%BD%B2ss-local%E5%AE%A2%E6%88%B7%E7%AB%AF/</link>
      <pubDate>Wed, 10 Aug 2022 16:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/ubuntu%E5%AE%BF%E4%B8%BB%E6%9C%BA%E9%83%A8%E7%BD%B2ss-local%E5%AE%A2%E6%88%B7%E7%AB%AF/</guid>
      <description>shadowsocks-libev基于ubuntu宿主机部署ss-local客户端.md 1. 安装 1.1 准备环境： Linux ubuntu 6.2.0-20-generic ubuntu 2023-04 amd64 基于ubuntu宿主机安装 shadowsocks-libev和v2ray-plugin 1.2 安装shadowsocks-libev： sudo apt install shadowsocks-libev1.3 安装v2ray-plugin 1 2 3 4 wget https://github.com/shadowsocks/v2ray-plugin/releases/download/v1.3.2/v2ray-plugin-linux-amd64-v1.3.2.tar.gz tar -zxvf v2ray-plugin-linux-amd64-v1.3.2.tar.gz mv v2ray-plugin_linux_amd64 /usr/bin/v2ray-plugin chmod 775 /usr/bin/v2ray-plugin 1.3 配置shadowsocks-libev配置文件 vi /etc/shadowsocks-libev/config.json{&amp;#34;server&amp;#34;: &amp;#34;domain.com&amp;#34;,&amp;#34;server_port&amp;#34;: 443,&amp;#34;password&amp;#34;: &amp;#34;password&amp;#34;,&amp;#34;method&amp;#34;: &amp;#34;aes-128-gcm&amp;#34;,&amp;#34;local_address&amp;#34;: &amp;#34;0.</description>
    </item>
    
    <item>
      <title>使用cloudflare转发ssh端口</title>
      <link>https://blog.hujian.xyz/posts/%E4%BD%BF%E7%94%A8cloudflare%E8%BD%AC%E5%8F%91ssh%E7%AB%AF%E5%8F%A3/</link>
      <pubDate>Thu, 21 Jul 2022 16:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/%E4%BD%BF%E7%94%A8cloudflare%E8%BD%AC%E5%8F%91ssh%E7%AB%AF%E5%8F%A3/</guid>
      <description>Cloudflare Tunnel cloudflare 提供的免费加密通道，通过 cloudflare 的 cnd 访问部署在内网的服务，比如 web,ssh,smb,tcp 等。 其工作方式类似于 frp，可以将本地服务发布到公网。只不过 frp 所需的服务器 IP 在 Cloudflare Tunnel 中变成了 Cloudflare 提供的节点。 相比于 frp 省去了服务器的成本。
1.准备 1.1 先决条件 必须需要一个 cloudflare 账号，以及开通 cloudflare zero trust。 cloudflare：https://www.cloudflare.com/ zero trust: https://one.dash.cloudflare.com/ 在你的需要内网穿透的设备上安装 cloudflared（cf 的本地 cli 客户端）
ubuntu/centos amd64架构 curl -L &#39;https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64&#39; -o /usr/bin/cloudflared &amp;amp;&amp;amp; chmod +x /usr/bin/cloudflared arm64 curl -L &#39;https://github.</description>
    </item>
    
    <item>
      <title>cn博客添加音乐组件</title>
      <link>https://blog.hujian.xyz/posts/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E5%A4%96%E9%93%BE/</link>
      <pubDate>Sat, 21 May 2022 16:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E5%A4%96%E9%93%BE/</guid>
      <description>1. 博客底部添加音乐组件 音乐效果
1.1 直接上代码示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 &amp;lt;!-- 为博客底部添加音乐组件 --&amp;gt; &amp;lt;div id=&amp;#34;player&amp;#34; class=&amp;#34;aplayer&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;link href=&amp;#34;https://files.cnblogs.com/files/shwee/APlayer.min_v1.10.1.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt; &amp;lt;script src=&amp;#34;https://files.</description>
    </item>
    
    <item>
      <title>navicat 15注册码</title>
      <link>https://blog.hujian.xyz/posts/naivcat%E5%AE%89%E8%A3%85/</link>
      <pubDate>Thu, 19 May 2022 16:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/naivcat%E5%AE%89%E8%A3%85/</guid>
      <description>注册码： NAVH-WK6A-DMVK-DKW3</description>
    </item>
    
    <item>
      <title>基于ssh隧道转发端口</title>
      <link>https://blog.hujian.xyz/posts/port-forward/</link>
      <pubDate>Tue, 10 May 2022 16:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/port-forward/</guid>
      <description>ssh端口转发(ssh port-forward) SSH 除了登录服务器，还有一大用途，就是作为加密通信的中介，充当两台服务器之间的通信加密跳板，使得原本不加密的通信变成加密通信。这个功能称为端口转发（port forwarding），又称 SSH 隧道（tunnel）。 端口转发有两个主要作用：
将不加密的数据放在 SSH 安全连接里面传输，使得原本不安全的网络服务增加了安全性，比如通过端口转发访问 Telnet、FTP 等明文服务，数据传输就都会加密。
作为数据通信的加密跳板，绕过网络防火墙。
端口转发有三种使用方法：本地转发，远程转发，动态转发。 因为常用到了前两种转发，这里只介绍前两种转发。
1. 本地转发 本地转发(local forwarding)指的是，将目标服务器的端口(target-host:target-port) 转发跳板机(tunnel-host) 映射到本地端口(local-port); 然后访问本地的端口(local-port)就可以通过跳板机(tunnel-host)转发到目标服务器的端口(target-host:target-port);
sh -L local-port:target-host:target-port tunnel-host 示例：
转发redis到本地16379 ssh -L 16379:127.0.0.1:6379 dev.hujian.xyz -N 2. 远程转发 远程转发指的是在远程 SSH 服务器建立的转发规则。 它跟本地转发正好反过来。建立本地计算机到远程计算机的 SSH 隧道以后，本地转发是通过本地计算机访问远程计算机，而远程转发则是通过远程计算机访问本地计算机。它的命令格式如下。
ssh -R remote-port:target-host:target-port -N remotehost
示例：
远程计算机通过curl http://my.public.server:8080 访问本地的80 web服务 ssh -R 8080:localhost:80 -N my.</description>
    </item>
    
    <item>
      <title>生成HTTPS证书</title>
      <link>https://blog.hujian.xyz/posts/%E7%94%9F%E6%88%90https%E8%AF%81%E4%B9%A6/</link>
      <pubDate>Mon, 21 Mar 2022 16:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/%E7%94%9F%E6%88%90https%E8%AF%81%E4%B9%A6/</guid>
      <description>生成HTTPS证书 1. 使用loge命令的方式生成HTTPS证书 参数说明：
*.domain.com 替换为你的域名，支持所有子域名 &amp;ndash; dns 是指域名在哪个云厂商，支持的云厂商有alidns/cloudflare aws;详细参考github官方文档 CLOUDFLARE_EMAIL=&amp;#34;xx@gmail.com&amp;#34; \CLOUDFLARE_API_KEY=&amp;#34;xxx&amp;#34; \lego --email &amp;#34;xx@gmail.com&amp;#34; --dns cloudflare --domains &amp;#34;*.domain.com&amp;#34; run 2 使用certbot的方式生成HTTPS证书 xx.domain.com 替换为你指定的子域名，只支持单个子域名
sudo certbot certonly --agree-tos --email xx@gmail.com --webroot -w /var/lib/letsencrypt/ -d xx.domain.com 3.检查HTTPS证书是否生效 cfssl-certinfo -domain xx.domain.com:443 4 参考文档： 使用certbot的方式生成HTTPS证书 使用lego手动生成tls证书参数文档 </description>
    </item>
    
    <item>
      <title>seo网站搜索优化</title>
      <link>https://blog.hujian.xyz/posts/seo%E4%BC%98%E5%8C%96/</link>
      <pubDate>Thu, 10 Mar 2022 16:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/seo%E4%BC%98%E5%8C%96/</guid>
      <description>1. seo网站搜索优化 搜索排行问题，主要是两方面优化方向：
第一是外链引用 第二是让搜索引擎的爬虫能收录/分析页面中的文本 技术相关的是第二，针对技术上的解决方案:
分析是否指定的浏览器才能展示结果，比如google游览器能正常访问网页，IE游览器访问 404，这样会影响搜索引擎的爬虫对真实内容的爬取，搜索引擎收录到这样的页面，一个相关的词都没有，搜索索引是没法建立的。解决方案是去掉这个判断逻辑。
网站是动态内容，且没有提供sitemap文件。这样的话，意味着即便没有第一个问题，搜索引擎也只会收录到了根页面，其它主页面、各个产品页，是不可能被收录到的，关键词索引也无从建立。解决方案是通过工具自动/手动生成一个根目录sitemap文件，和前端页面一起部署。
在网关title加上name为keywords和description 以及对应的content描述
示例： 1 &amp;lt;meta name=&amp;#34;keywords&amp;#34; content=&amp;#34;LoRaWAN,LoRaWAN module,LoRaWAN gateway,LoRaWAN 解决方案&amp;#34;&amp;gt;&amp;lt;meta name=&amp;#34;description&amp;#34; content=&amp;#34;....&amp;#34;&amp;gt; 通过Google/百度站点管理工具分析数据，通过此分析 官网相关的关键列表、搜索率、点击率等指标在一定时间范围内的变化，一个是看之前是什么状态，另外一个 要看解决了以上3个问题后，后面有没有得到改进。 2. 解决方案 目的：
提交seo收录，sitemap站点地图,将robots.t文件和sitemap.xml文件放到网站根目录下，示例文件如下: 蜘蛛访问站点权限 robots 站点sitemap地图 sitemap 通过站长工具分析网关排名以及关键字索引 百度站长 google站长 通过模拟器分析网站关键字收录情况 蜘蛛模拟-Screaming Frog SEO Spider 3 参考 seo优化 </description>
    </item>
    
    <item>
      <title>ssh密钥对</title>
      <link>https://blog.hujian.xyz/posts/ssh%E7%94%9F%E6%88%90%E5%AF%86%E9%92%A5%E5%AF%B9/</link>
      <pubDate>Wed, 10 Mar 2021 16:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/ssh%E7%94%9F%E6%88%90%E5%AF%86%E9%92%A5%E5%AF%B9/</guid>
      <description>1. ssh密钥对 ssh key的类型有四种，分别是dsa、rsa、 ecdsa、ed25519。 根据数学特性，这四种类型又可以分为两大类，dsa/rsa是一类，ecdsa/ed25519是一类，后者算法更先进。 dsa因为安全问题，已不再使用了。 ecdsa因为政治原因和技术原因，也不推荐使用。 rsa是目前兼容性最好的，应用最广泛的key类型，在用ssh-keygen工具生成key的时候，默认使用的也是这种类型。不过在生成key时，如果指定的key size太小的话，也是有安全问题的，推荐key size是3072或更大。 ed25519是目前最安全、加解密速度最快的key类型，由于其数学特性，它的key的长度比rsa小很多，优先推荐使用。它目前唯一的问题就是兼容性，即在旧版本的ssh工具集中可能无法使用。不过据我目前测试，还没有发现此类问题 2. ed25519 生成密钥对 ssh-keygen -t ed25519 -C &amp;quot;your_email@example.com&amp;quot; -f ed25519file
参数解释： -t： 指定使用的数字签名算法； -C: 注释，随便填； -f: 指定文件输出位置，可选默认为 ~/.ssh/ 3. 验证ssh密钥对 添加公钥：
Gitee公钥管理页面 GitHub公钥管理页面 验证命令，前提条件: 已经添加了公钥
1 2 ssh -T git@github.com # github ssh -T git@gitee.com # gitee 4. 总结 优先选择ed25519，否则选择rsa。 RSA算法通过使用不同的密钥进行加密和解密，实现了信息的保密性和完整性。它在实际应用中被广泛使用，但需要注意选择足够大的密钥长度以确保安全性。在安全性方面，RSA算法主要受到大整数分解问题的影响，随着量子计算技术的进步，RSA算法的安全性可能会受到威胁，因此一些新的算法如Ed25519等逐渐被引入以满足未来的安全需求。</description>
    </item>
    
    <item>
      <title>docker基础应用</title>
      <link>https://blog.hujian.xyz/posts/docker%E5%9F%BA%E7%A1%80%E5%BA%94%E7%94%A8/</link>
      <pubDate>Tue, 02 Mar 2021 16:19:04 +0800</pubDate>
      
      <guid>https://blog.hujian.xyz/posts/docker%E5%9F%BA%E7%A1%80%E5%BA%94%E7%94%A8/</guid>
      <description>1.指定docker数据存储路径 1.1 环境： centos 7.9 Docker version 20.10.10, build b485636 1.2 设置docker工作目录： 查看docker配置文件root目录 [root@localhost ~]# cat /usr/lib/systemd/system/docker.service |grep &amp;#34;ExecStart&amp;#34;ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock 停止正在运行的docker镜像以及docker服务 查看docker实际的数据存储目录，移动源(旧)数据到新的docker root目录： 1 2 3 docker info |grep &amp;#34;Docker Root Dir&amp;#34; systemctl stop docker.socket mv /var/lib/docker /data docker指定data存储位置 配置注意事项 1：以下内容中 &amp;ndash;insecure-registry=192.168.0.15 此处改为你自己服务器ip。 或者不填写也可以; 2：以下内容中 -graph /data/docker 是指定docker root路径 3：Docker version 23.</description>
    </item>
    
  </channel>
</rss>
